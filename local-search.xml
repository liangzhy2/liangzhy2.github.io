<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Bus Arbiter Release</title>
    <link href="/2022/03/26/Bus-Arbiter-Release/"/>
    <url>/2022/03/26/Bus-Arbiter-Release/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>DC基础知识五:Milkyway</title>
    <link href="/2021/10/25/DC%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%BA%94-Milkyway/"/>
    <url>/2021/10/25/DC%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%BA%94-Milkyway/</url>
    
    <content type="html"><![CDATA[<h3 id="Milkyway-储存两种数据-设计数据和物理库数据"><a href="#Milkyway-储存两种数据-设计数据和物理库数据" class="headerlink" title="Milkyway 储存两种数据:设计数据和物理库数据"></a>Milkyway 储存两种数据:设计数据和物理库数据</h3><p>Milkyway design library: 用来保存 netlist 和 约束文件</p><p>Milkyway reference library：用来保存物理信息，标准单元库，mcro,pad等cell 信息</p><h3 id="使用Milkyway-的文件要求"><a href="#使用Milkyway-的文件要求" class="headerlink" title="使用Milkyway 的文件要求"></a>使用Milkyway 的文件要求</h3><p>logic library和 Milkyway library</p><p><img src="/2021/10/25/DC%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%BA%94-Milkyway/image-20211026150353027.png" alt="image-20211026150353027"></p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>1.保证cell 在milkyway 和timing libray 的关联，否则只有milkyway的定义会出现错误<br>2.在运行write_milkyway命令之前运行uniquify<br>3.保证timing library和milkyway file的一致性，否则如果电气单位不同，则会对设计造成影响<br>4.DC大小写敏感</p><h3 id="脚本中使用Milkyway"><a href="#脚本中使用Milkyway" class="headerlink" title="脚本中使用Milkyway"></a>脚本中使用Milkyway</h3><h5 id="创建milkyway"><a href="#创建milkyway" class="headerlink" title="创建milkyway"></a>创建milkyway</h5><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs tcl">create_mw_lib -technology <span class="hljs-variable">$mw_tech_file</span> \<br>-mw_reference_library <span class="hljs-variable">$mw_reference_library</span> <span class="hljs-variable">$mw_design_library_name</span><br></code></pre></td></tr></table></figure><h5 id="打开milkyway"><a href="#打开milkyway" class="headerlink" title="打开milkyway"></a>打开milkyway</h5><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tcl">open_mw_lib <span class="hljs-variable">$mw_design_library_name</span><br></code></pre></td></tr></table></figure><h5 id="使用RC-参数，TLU-files"><a href="#使用RC-参数，TLU-files" class="headerlink" title="使用RC 参数，TLU+ files"></a>使用RC 参数，TLU+ files</h5><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs tcl">set_tlu_plus_files -max_tluplus <span class="hljs-variable">$max_tlu_file</span> \<br>-min_tluplus <span class="hljs-variable">$min_tlu_file</span> -tech2itf_map <span class="hljs-variable">$prs_map_file</span><br></code></pre></td></tr></table></figure><h3 id="保存Milkyway"><a href="#保存Milkyway" class="headerlink" title="保存Milkyway"></a>保存Milkyway</h3><h5 id="定义保存文件的路径"><a href="#定义保存文件的路径" class="headerlink" title="定义保存文件的路径"></a>定义保存文件的路径</h5><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tcl">set_app_var mw_design_library testmw # 指定保存milkyway文件的路径为testmw<br></code></pre></td></tr></table></figure><h5 id="定义设计文件name"><a href="#定义设计文件name" class="headerlink" title="定义设计文件name"></a>定义设计文件name</h5><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tcl">write_milkyway -output TOP  -overwrite # 定义设计文件name TOP<br></code></pre></td></tr></table></figure><h5 id="write-milkyway命令注意点"><a href="#write-milkyway命令注意点" class="headerlink" title="write_milkyway命令注意点"></a>write_milkyway命令注意点</h5><p>1.命令和<code>create_mw_lib</code> 配套使用</p><p>2.如果之前已经保存milkyway 文件，则实在原有文件的基础上增加新的设计文件，修改版本参数，也可以使用<code>-overwrite</code> 进行内容覆盖。</p><p>3.命令不会修改内存中的内容</p><p>4.命令会保存设计的层次结构</p><h3 id="Milkyway的限制"><a href="#Milkyway的限制" class="headerlink" title="Milkyway的限制"></a>Milkyway的限制</h3><p>1.设计必须是mapped</p><p>2.设计不包含多实例化设计</p><p>3.整体保存设计，不能只保存部分设计</p>]]></content>
    
    
    
    <tags>
      
      <tag>Design Compiler</tag>
      
      <tag>Milkyway</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Setup With Library</title>
    <link href="/2021/10/23/Setup-With-Library/"/>
    <url>/2021/10/23/Setup-With-Library/</url>
    
    <content type="html"><![CDATA[<h3 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h3><p>在DC 优化过程被用来映射的<code>logic library</code>被称作<code>target library</code>,<code>target library</code>包含生成netlist的cells 以及操作环境(PVT)的定义。</p><p>target library 是link library的子集，而Link library 被用作计算时序和路径延时，常被用在DC 中的compiler和translate</p><p>在DC Ultra中，用户可以自己创建伪库，<em>ALIB</em>，用来将设计中的布尔等式映射成gate cell</p><h3 id="库文件要求"><a href="#库文件要求" class="headerlink" title="库文件要求"></a>库文件要求</h3><p><strong>target library</strong><br>包含cell的功能与特征，也可能存在必须满足的要求，DRC、PVT</p><p>常用库的模型</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">NLDM: nonlinear delay models-非线性延时模型<br>CCS: Composite Current Source-fu电流源<br></code></pre></td></tr></table></figure><h5 id="使用Logic-library的场景"><a href="#使用Logic-library的场景" class="headerlink" title="使用Logic library的场景"></a>使用Logic library的场景</h5><ol><li>实现设计功能——<code>target library</code></li><li>解析cell reference——<code>Link library</code></li><li>计算时序和路径延时——<code>Link library</code></li><li>计算功耗——<code>Power Compiler</code></li></ol><p>在link library中找到的第一个库文件会被认为是<code>main library</code>，而这个库中的物理信息，PVT等会被用于设计，以及时序和路径延时计算</p><p>Target Library被用于Mapping 设计功能，并找出对应的gate cell,因此在指定<code>target library</code>中的内容时，library应该是在DC Mapping 阶段使用到了standard cell library,对于其他种类的library不应该被应用在<code>target library</code>中。</p><p>Link library 实在compile阶段，将设计实例化成库单元，这个过程可以称作<code>link library</code>或者<code>resolving design</code></p><h5 id="在DC综合过程中相关变量如下；"><a href="#在DC综合过程中相关变量如下；" class="headerlink" title="在DC综合过程中相关变量如下；"></a>在DC综合过程中相关变量如下；</h5><p><strong><code>link_library</code></strong></p><p><code>local_link_library</code>,这个变量会被添加在<code>link_library</code>中的library文件，DC会首先在这些文件路径resolve design</p><h4 id="DesignWare-Library"><a href="#DesignWare-Library" class="headerlink" title="DesignWare Library"></a>DesignWare Library</h4><p>这个库是一个可重用电路设计模块，被集成在Synopsys综合环境中，可以用来对算术运算符，if,case等语法进行转换，获得最好的速度和面积优化。</p><p>可以通过指定变量<code>synthetci_libraray</code>,指定使用用户自定义的<strong>DesignWare Library</strong></p><p>此外，DC会自动连接软件中默认的DesignWare Library，一般用户可以不设置该变量，当用户自行添加DesignWare lib时，则需要定义变量，并在link library列表中添加变量</p><h4 id="Physical-Library-Milkyway"><a href="#Physical-Library-Milkyway" class="headerlink" title="Physical Library-Milkyway"></a>Physical Library-Milkyway</h4><p>在DC topographical 模式下，需要指定physical library,在综合阶段使用的是Milkyway design library</p><p>输入需要创建Milkyway library: Milkyway referece library, Synopsys technology library</p><p>其中MikywayReference Library 主要用在物理实现的standard cell 和 Macro的信息。</p><p>Synopsys technology library : 主要是设计的布线信息</p><h5 id="几个库文件定义的技巧"><a href="#几个库文件定义的技巧" class="headerlink" title="几个库文件定义的技巧"></a>几个库文件定义的技巧</h5><p>需要定义<code>target library</code> 、<code>link library</code> 等变量，一般link library以* 开头，表示link 内存中存在的库文件</p><p>TLU+ Fiile : 更加准确的RC参数预估</p><p><code>Milkyway Library</code> = <code>Milkyway reference library</code> + <code>Synopsys technology file</code> </p><p>在操作中创建Milyway命令</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tcl">create_mw_lib -technology <span class="hljs-variable">$my_technology</span> -mw_reference_lib <span class="hljs-variable">$my_reference</span> <span class="hljs-variable">$my_design_library</span>  # 创建Milkyway，并赋给变量<span class="hljs-variable">$my_design_library</span><br><br>open_mw_lib <span class="hljs-variable">$my_design_library</span> # 创建Milkyway Lib<br></code></pre></td></tr></table></figure><p>TLU+ File 只能在拓扑模式下运行，文件包含电阻电容值查找表以及超深亚微米工艺影响模型，提供了更加精确的RC 参数模型，改善综合对后端的影响，提高设计质量。此外，也可以使用 <code>nxgrd file</code> 来替代 TLU+ file 。</p><h3 id="Working-with-Library"><a href="#Working-with-Library" class="headerlink" title="Working with Library"></a>Working with Library</h3><h4 id="加载库文件"><a href="#加载库文件" class="headerlink" title="加载库文件"></a>加载库文件</h4><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs tcl">read_file my_lib.db # 加载标准单元库<br>read_file my_slib.sdb # 加载用于symbol的library<br></code></pre></td></tr></table></figure><p>库文件中<code>.db</code> 文件用在logic library，<code>.sdb</code> 用在symbol library</p><h4 id="显示库文件信息"><a href="#显示库文件信息" class="headerlink" title="显示库文件信息"></a>显示库文件信息</h4><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tcl">list_libs  # 用来显示在内存中库文件信息<br></code></pre></td></tr></table></figure><h4 id="不使用库文件中某些单元"><a href="#不使用库文件中某些单元" class="headerlink" title="不使用库文件中某些单元"></a>不使用库文件中某些单元</h4><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tcl">set_dont_use my_lib/INV_HD  # 在库单元INV_HD上设置 dont_use，DC识别此变量之后不在使用该单元<br></code></pre></td></tr></table></figure><h4 id="验证库文件一致性"><a href="#验证库文件一致性" class="headerlink" title="验证库文件一致性"></a>验证库文件一致性</h4><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs tcl">check_library # 检查库文件一致性<br><span class="hljs-comment"># 检查事项</span><br><span class="hljs-comment"># logic library的一致性</span><br><span class="hljs-comment"># logic 和 physical 的一致性</span><br><span class="hljs-comment"># physical 和 technology 的一致性</span><br><br><span class="hljs-comment"># 实际上DC工具检查的对象是link library 和 Milkyway之间的一致性</span><br></code></pre></td></tr></table></figure><h3 id="Target-Library-Subset3"><a href="#Target-Library-Subset3" class="headerlink" title="Target Library Subset3"></a>Target Library Subset3</h3><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tcl">set_target_library_subset  #可以用来指定特定模块使用的target library,这个ibrary被称作子库<br></code></pre></td></tr></table></figure><p>在层次结构指定子库，会默认重写所有更低层级的cells, 但在 <font color="Red">指定target library的模块设计，不能够被打散</font> 。</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tcl">check_target_library_subset # 检查子库设计需求<br>report_target_library_subset  # 报告设计中已经应用子库的信息<br><br>remove_target_library_subset # 移除设计中应用的子库设置<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>setup</tag>
      
      <tag>library</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HDL_Coding_Synthesis</title>
    <link href="/2021/10/23/HDL-Coding-Synthesis/"/>
    <url>/2021/10/23/HDL-Coding-Synthesis/</url>
    
    <content type="html"><![CDATA[<p>HDL 是综合的基础，如果一个HDL设计质量很高，则可以提高优化的质量。下面介绍如何写出更加高质量的HDL Design</p><h3 id="1-写工艺独立的HDL"><a href="#1-写工艺独立的HDL" class="headerlink" title="1.写工艺独立的HDL"></a>1.写工艺独立的HDL</h3><p>高质量的设计是在完全自动的综合过程中获得没有实例化的 gate cell 和 flip-flop.<br>首先是工具推断设计器件:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">1. 推断MUX<br>2. 推断寄存器<br>3. 没有控制信号的寄存器<br>4. 有控制信号的寄存器<br>5. 三态门器件<br>6. 多比特器件<br></code></pre></td></tr></table></figure><h3 id="2-使用-HDL-结构体"><a href="#2-使用-HDL-结构体" class="headerlink" title="2.使用 HDL 结构体"></a>2.使用 HDL 结构体</h3><h3 id="3-编写高效代码"><a href="#3-编写高效代码" class="headerlink" title="3.编写高效代码"></a>3.编写高效代码</h3>]]></content>
    
    
    
    <tags>
      
      <tag>HDL Coding</tag>
      
      <tag>Synthesis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>innovus_setup</title>
    <link href="/2021/10/21/innovus-setup/"/>
    <url>/2021/10/21/innovus-setup/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
    <tags>
      
      <tag>setup</tag>
      
      <tag>innovus</tag>
      
      <tag>commandlline</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DC_MMMC</title>
    <link href="/2021/10/21/DC-MMMC/"/>
    <url>/2021/10/21/DC-MMMC/</url>
    
    <content type="html"><![CDATA[<h4 id="MMMC"><a href="#MMMC" class="headerlink" title="MMMC"></a>MMMC</h4><h5 id="Corner"><a href="#Corner" class="headerlink" title="Corner"></a>Corner</h5><p>&emsp;Corner 可以用于指代 PVT 集合，Multi-Corner意味着有多个PVT环境.</p><h5 id="Mode"><a href="#Mode" class="headerlink" title="Mode"></a>Mode</h5><p>&emsp;Mode 是一系列clock, 供电电压， timing constraint, libraries, SDF or parastic file 的集合，Multi-mode 用于test mode, mission mode, standby等.</p><h5 id="Scenario"><a href="#Scenario" class="headerlink" title="Scenario"></a>Scenario</h5><p>&emsp;Scenario 是一系列模型约束和指定的corner.一个Scenario 至少要包含指定TLUPlus library, 操作条件, 约束</p>]]></content>
    
    
    
    <tags>
      
      <tag>DC</tag>
      
      <tag>MMMC</tag>
      
      <tag>Concept</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DC知识点总结</title>
    <link href="/2021/10/20/DC_summary/"/>
    <url>/2021/10/20/DC_summary/</url>
    
    <content type="html"><![CDATA[<h3 id="编写脚本用于处理综合报告信息"><a href="#编写脚本用于处理综合报告信息" class="headerlink" title="编写脚本用于处理综合报告信息"></a>编写脚本用于处理综合报告信息</h3><p>  在分析综合报告的时候，用户往往只关注部分重要的的报告信息。而一次综合流程输出的报告数目比较多，在阅读和分析过程往往会令人无从下手，因此设计一个脚本文件，当用户在<code>./report</code>文件下执行脚本后，自动生成一个报告总结，汇总需要用户关注的报告信息。</p><h5 id="Tcl脚本思路"><a href="#Tcl脚本思路" class="headerlink" title="Tcl脚本思路"></a>Tcl脚本思路</h5><p>  伪代码的书写思路大致如下所示，具体的代码则需要更加细致的补充</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs tcl"><span class="hljs-comment"># 获取当前目录绝对位置和目录下的文件名</span><br>filepath = <span class="hljs-keyword">pwd</span><br><span class="hljs-keyword">filename</span> = [ <span class="hljs-keyword">eval</span> ls ]<br><span class="hljs-comment"># 对文件名进行处理</span><br><span class="hljs-keyword">split</span> <span class="hljs-variable">$filename</span> <span class="hljs-string">&quot;\n&quot;</span><br><br><span class="hljs-comment"># 遍历文件名</span><br><span class="hljs-keyword">foreach</span> line <span class="hljs-variable">$filename</span> &#123;<br><span class="hljs-comment"># 判断文件名，正则匹配，选择想要的文件</span><br><span class="hljs-keyword">if</span> &#123;<span class="hljs-keyword">string</span> first <span class="hljs-variable">$line</span>&#125; &#123;<br><span class="hljs-keyword">file</span> copy <span class="hljs-variable">$line</span> <span class="hljs-variable">$filepath</span>/report_review<br>&#125; elseif &#123;<br><span class="hljs-comment"># 继续进行其他字符串匹配</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2021/10/20/DC_summary/dc_flow.png" alt="DC Flow Summary" style="zoom:33%;"><p>&emsp; 上述图片是实际项目过程中的命令执行流程，在实际的工作环境中，每一步骤都会处理上一步骤的环境配置，因此每一次都会加载上一次的信息，这是一个重复的过程，因此在脚本环境中，会出现重复读入输入，并利用同一个命令输出每一步骤的报告。</p><p>&emsp; 在设计中，实际的效率并不高，特别是当设计模块已经到达千万，甚至上亿门之后，综合要求更多的软件运行时间，如果某一步骤运行出错，会导致下一步骤无法运行，这对综合人员来说也是一种压力，特别是在后端进度实际就是为了给前端节省时间的情况之下。</p><p>&emsp; 在上图的内容中，综合过程可以概括为compiler+elaborate,之后的insert_dft 属于DFT工程师的设计内容在实际的过程中，综合工程师可能在了解原理的情况下进行dft的插入</p><p>DC优化设计方式：给指定功能提供最小、最快的逻辑实现。<br>DC的过程：综合HDL，将其转换为optimized, technology-dependent, gate-level design. 支持flat 和 hierarchical design, 支持组合和时序设计，主要进行面积，时序，功耗优化。</p><h3 id="DC工具简介"><a href="#DC工具简介" class="headerlink" title="DC工具简介"></a>DC工具简介</h3><p>DC Expert keyword: Wire load Mode, WLM<br>DC Ultra keyword: concurrent(并发) advanced optimization,high performance design, Topographical technology-可以用来精确估计设计的物理信息<br>DC Graphical keyword: optimize MMMC design, reduce congestion, improve runtime in ICC, floorplan</p><h4 id="DC-Expert-Feature"><a href="#DC-Expert-Feature" class="headerlink" title="DC Expert Feature"></a>DC Expert Feature</h4><ol><li>层次化编译(bottom-up or top-down)</li><li>全编译，增量编译</li><li>为复杂的 Flip-Flop 和latch 做时序优化</li><li>基于latch设计的时序补偿</li><li>时序分析</li><li>命令行及GUI</li></ol><h4 id="DC-Ultra-Feature-相比-DCE-增加的"><a href="#DC-Ultra-Feature-相比-DCE-增加的" class="headerlink" title="DC Ultra Feature(相比 DCE 增加的)"></a>DC Ultra Feature(相比 DCE 增加的)</h4><ol><li>更快的运行时间</li><li>先进的算法优化</li><li>集成datapath partition and synthesis</li><li>先进时序分析</li><li>先进的延时优化算法</li><li>先进的<code>leakage power</code>优化</li><li>register retiming(工具通过在组合逻辑间移动register优化时序)</li></ol><h5 id="DC-Ultra-in-Topographical-technology"><a href="#DC-Ultra-in-Topographical-technology" class="headerlink" title="DC Ultra in Topographical technology"></a>DC Ultra in Topographical technology</h5><ol><li>多电压多供电设计</li><li>Concurrent MMMC优化，减少迭代次数提高，获得结果的时间效率</li><li>和ICC共享 Placement以及优化技术，使用更准确的数据处理，提高设计质量</li></ol><h4 id="DC-Graphical-Feature"><a href="#DC-Graphical-Feature" class="headerlink" title="DC Graphical Feature"></a>DC Graphical Feature</h4><ol><li>优化MMMC design</li><li>减少Routing Congestion</li><li>提高area, timing与ICC的联系</li><li>提高在ICC中的运行时间与可布线性</li><li>创建和修改Floorplan (using Floorplan Exploration)</li><li>Physical guidence technology，包含enhanced placement,提高QoR等能力</li></ol><h4 id="DC-in-Design-Flow"><a href="#DC-in-Design-Flow" class="headerlink" title="DC in Design Flow"></a>DC in Design Flow</h4><p><img src="/2021/10/20/DC_summary/image-20211021172150689.png" alt="DC in Design Flow"></p><h4 id="DC术语"><a href="#DC术语" class="headerlink" title="DC术语"></a>DC术语</h4><p>尽管下面术语有轻微的不同，在DC manual 中可以看作相等的含义。</p><p>Synthesis: 指为RTL生成 gate-level netlist的过程，过程包含read design 和 optimize design<br>Optimization: 是Synthesis中的一步操作，指完成(选择)满足设计约束的library cell 集合<br>Compile: 是Design Compiler 的过程，用来执行synthesis 和 optimization</p><h5 id="Design"><a href="#Design" class="headerlink" title="Design"></a>Design</h5><hr><p>Design:实现逻辑功能的电路描述。<br>    Logical-level Design: 使用 Boolen equation 实现<br>    Gate-level Design: 使用 Interconnect cell 实现</p><p>Flat Design: 不包含子设计，只有一个结构层次，且只包含library celll<br>Hierarchical Design: 包含子设计，子设计也可以包含子设计，创建多个层次结构</p><p>Reference: 一个用来搭建更大电路的library component or design<br>Leaf cell: 只包含一个设计的unique instance<br>Port: 端口拥有方向，input, output, inout</p><h3 id="DC支持的Flow类型"><a href="#DC支持的Flow类型" class="headerlink" title="DC支持的Flow类型"></a>DC支持的Flow类型</h3><p>Full compile: DC map、optimize整个设计，产生一个gate-level netlist，并且如果设计中存在已经mapped cell也会被 unmapped,该Flow不会保护已经存在的netlist结构。</p><p>Incremental compile: DC 可以通过改善设计结构提高design QoR,它是在init compile的基础上进行mapping, 主要集中在未满足约束的area设计上，已经存在的netlist会被保护起来，mapping 优化只有在能够改善设计的基础上被采用</p><h5 id="编译策略"><a href="#编译策略" class="headerlink" title="编译策略"></a>编译策略</h5><p>Top-down: top-level design 和子设计共同编译.<br>Bottom-up: 子设计分开编译，从底层一直变异到top-level.<br>Mixed: 小模块使用Top-down,大模块使用Bottom-up.</p><h3 id="Optimization"><a href="#Optimization" class="headerlink" title="Optimization"></a>Optimization</h3><p>基于约束与变量进行优化，将设计转换成library cell，其理念是如果设计能够减少功耗且不增加其他设计模块的功耗，则可以采用该cell，完成优化</p><h4 id="Design-Compiler-Mode"><a href="#Design-Compiler-Mode" class="headerlink" title="Design Compiler Mode"></a>Design Compiler Mode</h4><p>Wire Load Mode:线性负载模型，延时计算使用估计，精度较差</p><p>Topographical Mode:拓扑模型，延时计算精确性更高</p><p>​        Multimode: 多corner，多mode</p><p>​        UPF Mode: UPF低功耗</p><p>WLM:在默认情况下，<code>dc_shell</code>会启用WLM, 使用线性负载进行时序预估，此时<code>compile</code> 和<code>compile_ultra</code>都是在WLM下进行synthesis过程</p><p>Topographical: 需要命令<code>dc_sell -topographical_mode</code>启用，此时<code>compile_ultra</code>和<code>compile_ulra -spg</code>都工作在拓扑模式，且<code>-spg</code>工作在DC Graphical模式，会使用到后端<code>Floorplan</code>的物理信息。</p><h5 id="Setup-File"><a href="#Setup-File" class="headerlink" title="Setup File"></a>Setup File</h5><p>DC 从三个文件位置读取<code>.synopsys_dc.setup</code>文件</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nsis">The Synopsys Root <span class="hljs-literal">directory</span><br>Your home <span class="hljs-literal">directory</span><br>The <span class="hljs-literal">current</span> working <span class="hljs-literal">directory</span><br></code></pre></td></tr></table></figure><h5 id="Name-Rules"><a href="#Name-Rules" class="headerlink" title="Name Rules"></a>Name Rules</h5><p>一些制造厂可能会自己修改命令规则，比如将Design Ware中的<em>cell</em> 转换成<em>U</em> , 将 <em>reset</em>转换成<em>RET</em>等</p><p>用户也可以通过命令修改命名规则，<code>define_name_rules</code> 和 <code>change_name</code>可以用来改变port 和 net的名称</p><h5 id="dc-shell执行的程序过程"><a href="#dc-shell执行的程序过程" class="headerlink" title="dc_shell执行的程序过程"></a><code>dc_shell</code>执行的程序过程</h5><p>1.创建log文件</p><p>2.读取<code>.synopsys_dc.setup</code>文件</p><p>3.Batch Mode下执行脚本文件</p><p>4.展示DC应用的信息</p><h5 id="重定向标准输入输出"><a href="#重定向标准输入输出" class="headerlink" title="重定向标准输入输出"></a>重定向标准输入输出</h5><p>重定向命令可以分成三个命令：</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tcl"><span class="hljs-keyword">puts</span> <span class="hljs-string">&quot;hello world&quot;</span> &gt; <span class="hljs-keyword">file</span>.log# 输出到<span class="hljs-keyword">file</span>.log中，且会覆盖文件之前的内容<br><span class="hljs-keyword">puts</span> <span class="hljs-string">&quot;hello world&quot;</span> &gt;&gt; <span class="hljs-keyword">file</span>.log# 在文件末尾增加<span class="hljs-keyword">file</span>.log内容，不会覆盖文件之前的内容<br><br>redirect <span class="hljs-keyword">file</span>.log &#123;plus <span class="hljs-number">12</span> <span class="hljs-number">13</span>&#125;  # 将<span class="hljs-number">12</span>+<span class="hljs-number">13</span>的结果输出到<span class="hljs-keyword">file</span>.log中。<br></code></pre></td></tr></table></figure><h3 id="The-Synthesis-Flow"><a href="#The-Synthesis-Flow" class="headerlink" title="The Synthesis Flow"></a>The Synthesis Flow</h3><p><img src="/2021/10/20/DC_summary/image-20211022111016582.png" alt="Synthesis Flow"></p><h3 id="Using-Multicore-Technology"><a href="#Using-Multicore-Technology" class="headerlink" title="Using Multicore Technology"></a>Using Multicore Technology</h3><p>DC 支持使用多核技术完成程序运行任务，每个license支持 8 cores, 可以使用命令设置多核功能</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tcl">set_host_optiops -max_cores <span class="hljs-number">8</span>  # 设置最大运行核数为<span class="hljs-number">8</span>个，增加并行执行任务数，减少运行时间<br></code></pre></td></tr></table></figure><h4 id="通过多核技术提高运行时间"><a href="#通过多核技术提高运行时间" class="headerlink" title="通过多核技术提高运行时间"></a>通过多核技术提高运行时间</h4><p>report 或者 check命令会增加脚本运行时间，为了减少运行时间，可以并行多核执行命令</p><p>1.在DCG mode下，可以使用命令<code>redirect -bg</code>指定后台运行的命令以及执行命令的cores。但是后台最多只能指定两个后台运行的任务，只有后台活跃任务少于两个，剩余的任务才能运行.支持 <code>report</code> <code>analysis</code>等命令<br>2.在<code>redirect -bg</code>命令使用时，需要关闭<code>set_svf</code>命令，等<code>redirect -bg</code>使用完成之后，才能继续使用。</p><p><code>parallel_execute</code>用来并行执行命令，如果默认没有<code>update_timing</code>,则<code>parallel_execute</code>会自动执行<code>update_timing</code></p><h3 id="在综合中划分模块"><a href="#在综合中划分模块" class="headerlink" title="在综合中划分模块"></a>在综合中划分模块</h3><p>综合中，模块划分可以减少综合时间，但是查的划分会增加block的尺寸，增加优化时间。</p><h4 id="考虑设计重用划分"><a href="#考虑设计重用划分" class="headerlink" title="考虑设计重用划分"></a>考虑设计重用划分</h4><p>设计重用可以减少设计时间，根据设计重用的目的进行划分可以利用实例化设计减少设计时间</p><h5 id="保存组合逻辑设计完整性"><a href="#保存组合逻辑设计完整性" class="headerlink" title="保存组合逻辑设计完整性"></a>保存组合逻辑设计完整性</h5><p>1.将相关的组合逻辑和它的目标寄存器组合在一起<br>2.消除glue logic(胶连逻辑), “Do not add glue-logic at the top level”的意思就是说在设计的顶层连接各个子模块的时候要直接相连，而不要插入一些简单逻辑来连接各个子模块。</p><h4 id="以寄存器作为输出"><a href="#以寄存器作为输出" class="headerlink" title="以寄存器作为输出"></a>以寄存器作为输出</h4><p>为了简化约束定义，将寄存器作为全部模块的输出。对约束编写有两个好处：<br>1.一个独立模块的输入驱动能力总是和平均的输入驱动能力相等<br>2.前一个模块的输入延时，总是和Flip-Flop路径延时相等，这样的话不需要考虑只有组合逻辑的路径，也就能够更好的进行时序预算</p><h4 id="根据设计目的划分"><a href="#根据设计目的划分" class="headerlink" title="根据设计目的划分"></a>根据设计目的划分</h4><p>设计如果为了更好的面积优化以及 <code>timing critical</code> ,则可以根据设计目的进行划分，这样就可以对特定的模块采用针对性的约束指定优化策略</p><h4 id="根据编译技术进行划分"><a href="#根据编译技术进行划分" class="headerlink" title="根据编译技术进行划分"></a>根据编译技术进行划分</h4><p>当设计中出现高度结构化的设计和随机设计时，可以对不同的模块采用不同的编译策略<br>1.高度结构化电路设计：例如，错误检测电路，这种电路包含大量的OR tree ,更加适合结构化编译<br>2.random design : 在flatten design 中出现的设计策略</p><h4 id="保证共享资源的一致性"><a href="#保证共享资源的一致性" class="headerlink" title="保证共享资源的一致性"></a>保证共享资源的一致性</h4><p>资源共享只会出现在verilog中的always 语句块，DC 可以使用资源共享获取更好的设计质量，如下图所示：</p><img src="/2021/10/20/DC_summary/image-20211023150756692.png" alt="设计资源共享" style="zoom: 67%;"><h4 id="保证用户定义资源和驱动逻辑的完整性"><a href="#保证用户定义资源和驱动逻辑的完整性" class="headerlink" title="保证用户定义资源和驱动逻辑的完整性"></a>保证用户定义资源和驱动逻辑的完整性</h4><p>user-defined resource是用户自定义的函数，程序或者是Macro cell,DC不会自动创建这些资源的实例化设计，当一个user-defined resource 实例化无法满足设计要求时，可以手动增加实例化设计的数目，来完成设计要求。</p><img src="/2021/10/20/DC_summary/image-20211023152026364.png" alt="image-20211023152026364" style="zoom:80%;"><h4 id="隔绝特定功能"><a href="#隔绝特定功能" class="headerlink" title="隔绝特定功能"></a>隔绝特定功能</h4><p>可以通过功能在Top-level进行模块划分，例如隔离异步设计模块可以缩小STA问题分析的范围以及确定可测试性设计范围。</p><img src="/2021/10/20/DC_summary/image-20211023152521250.png" alt="隔绝特定功能" style="zoom:80%;">]]></content>
    
    
    
    <tags>
      
      <tag>DC综合工具使用</tag>
      
      <tag>TCL脚本语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/10/20/hello-world/"/>
    <url>/2021/10/20/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><p><img src="/2021/10/20/hello-world/image-20211020164734203.png" alt="image-20211020164734203"></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
