{"meta":{"title":"LiangZhy","subtitle":"","description":"好好学习，天天向上","author":"Liang Zhy","url":"http://example.com","root":"/"},"pages":[{"title":"about","date":"2021-10-20T11:34:00.000Z","updated":"2021-10-20T11:34:48.987Z","comments":false,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"这里写关于页的正文，支持 Markdown, HTML"}],"posts":[{"title":"DC基础知识五:Milkyway","slug":"DC基础知识五-Milkyway","date":"2021-10-25T06:24:15.000Z","updated":"2021-10-26T07:18:42.982Z","comments":true,"path":"2021/10/25/DC基础知识五-Milkyway/","link":"","permalink":"http://example.com/2021/10/25/DC%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%BA%94-Milkyway/","excerpt":"","text":"Milkyway 储存两种数据:设计数据和物理库数据Milkyway design library: 用来保存 netlist 和 约束文件 Milkyway reference library：用来保存物理信息，标准单元库，mcro,pad等cell 信息 使用Milkyway 的文件要求logic library和 Milkyway library 注意事项1.保证cell 在milkyway 和timing libray 的关联，否则只有milkyway的定义会出现错误2.在运行write_milkyway命令之前运行uniquify3.保证timing library和milkyway file的一致性，否则如果电气单位不同，则会对设计造成影响4.DC大小写敏感 脚本中使用Milkyway创建milkyway12create_mw_lib -technology $mw_tech_file \\-mw_reference_library $mw_reference_library $mw_design_library_name 打开milkyway1open_mw_lib $mw_design_library_name 使用RC 参数，TLU+ files12set_tlu_plus_files -max_tluplus $max_tlu_file \\-min_tluplus $min_tlu_file -tech2itf_map $prs_map_file 保存Milkyway定义保存文件的路径1set_app_var mw_design_library testmw # 指定保存milkyway文件的路径为testmw 定义设计文件name1write_milkyway -output TOP -overwrite # 定义设计文件name TOP write_milkyway命令注意点1.命令和create_mw_lib 配套使用 2.如果之前已经保存milkyway 文件，则实在原有文件的基础上增加新的设计文件，修改版本参数，也可以使用-overwrite 进行内容覆盖。 3.命令不会修改内存中的内容 4.命令会保存设计的层次结构 Milkyway的限制1.设计必须是mapped 2.设计不包好多实例化设计 3.整体保存设计，不能只保存部分设计","categories":[],"tags":[{"name":"Design Compiler","slug":"Design-Compiler","permalink":"http://example.com/tags/Design-Compiler/"},{"name":"Milkyway","slug":"Milkyway","permalink":"http://example.com/tags/Milkyway/"}]},{"title":"Setup With Library","slug":"Setup-With-Library","date":"2021-10-23T09:06:16.000Z","updated":"2021-10-25T05:35:19.927Z","comments":true,"path":"2021/10/23/Setup-With-Library/","link":"","permalink":"http://example.com/2021/10/23/Setup-With-Library/","excerpt":"","text":"Notes在DC 优化过程被用来映射的logic library被称作target library,target library包含生成netlist的cells 以及操作环境(PVT)的定义。 target library 是link library的子集，而Link library 被用作计算时序和路径延时，常被用在DC 中的compiler和translate 在DC Ultra中，用户可以自己创建伪库，ALIB，用来将设计中的布尔等式映射成gate cell 库文件要求target library包含cell的功能与特征，也可能存在必须满足的要求，DRC、PVT 常用库的模型 12NLDM: nonlinear delay models-非线性延时模型CCS: Composite Current Source-fu电流源 使用Logic library的场景 实现设计功能——target library 解析cell reference——Link library 计算时序和路径延时——Link library 计算功耗——Power Compiler 在link library中找到的第一个库文件会被认为是main library，而这个库中的物理信息，PVT等会被用于设计，以及时序和路径延时计算 Target Library被用于Mapping 设计功能，并找出对应的gate cell,因此在指定target library中的内容时，library应该是在DC Mapping 阶段使用到了standard cell library,对于其他种类的library不应该被应用在target library中。 Link library 实在compile阶段，将设计实例化成库单元，这个过程可以称作link library或者resolving design 在DC综合过程中相关变量如下；link_library local_link_library,这个变量会被添加在link_library中的library文件，DC会首先在这些文件路径resolve design DesignWare Library这个库是一个可重用电路设计模块，被集成在Synopsys综合环境中，可以用来对算术运算符，if,case等语法进行转换，获得最好的速度和面积优化。 可以通过指定变量synthetci_libraray,指定使用用户自定义的DesignWare Library 此外，DC会自动连接软件中默认的DesignWare Library，一般用户可以不设置该变量，当用户自行添加DesignWare lib时，则需要定义变量，并在link library列表中添加变量 Physical Library-Milkyway在DC topographical 模式下，需要指定physical library,在综合阶段使用的是Milkyway design library 输入需要创建Milkyway library: Milkyway referece library, Synopsys technology library 其中MikywayReference Library 主要用在物理实现的standard cell 和 Macro的信息。 Synopsys technology library : 主要是设计的布线信息 几个库文件定义的技巧需要定义target library 、link library 等变量，一般link library以* 开头，表示link 内存中存在的库文件 TLU+ Fiile : 更加准确的RC参数预估 Milkyway Library = Milkyway reference library + Synopsys technology file 在操作中创建Milyway命令 123create_mw_lib -technology $my_technology -mw_reference_lib $my_reference $my_design_library # 创建Milkyway，并赋给变量$my_design_libraryopen_mw_lib $my_design_library # 创建Milkyway Lib TLU+ File 只能在拓扑模式下运行，文件包含电阻电容值查找表以及超深亚微米工艺影响模型，提供了更加精确的RC 参数模型，改善综合对后端的影响，提高设计质量。此外，也可以使用 nxgrd file 来替代 TLU+ file 。 Working with Library加载库文件12read_file my_lib.db # 加载标准单元库read_file my_slib.sdb # 加载用于symbol的library 库文件中.db 文件用在logic library，.sdb 用在symbol library 显示库文件信息1list_libs # 用来显示在内存中库文件信息 不使用库文件中某些单元1set_dont_use my_lib/INV_HD # 在库单元INV_HD上设置 dont_use，DC识别此变量之后不在使用该单元 验证库文件一致性1234567check_library # 检查库文件一致性# 检查事项# logic library的一致性# logic 和 physical 的一致性# physical 和 technology 的一致性# 实际上DC工具检查的对象是link library 和 Milkyway之间的一致性 Target Library Subset31set_target_library_subset #可以用来指定特定模块使用的target library,这个ibrary被称作子库 在层次结构指定子库，会默认重写所有更低层级的cells, 但在 指定target library的模块设计，不能够被打散 。 1234check_target_library_subset # 检查子库设计需求report_target_library_subset # 报告设计中已经应用子库的信息remove_target_library_subset # 移除设计中应用的子库设置","categories":[],"tags":[{"name":"setup","slug":"setup","permalink":"http://example.com/tags/setup/"},{"name":"library","slug":"library","permalink":"http://example.com/tags/library/"}]},{"title":"HDL_Coding_Synthesis","slug":"HDL-Coding-Synthesis","date":"2021-10-23T07:52:03.000Z","updated":"2021-10-23T08:22:08.800Z","comments":true,"path":"2021/10/23/HDL-Coding-Synthesis/","link":"","permalink":"http://example.com/2021/10/23/HDL-Coding-Synthesis/","excerpt":"","text":"HDL 是综合的基础，如果一个HDL设计质量很高，则可以提高优化的质量。下面介绍如何写出更加高质量的HDL Design 1.写工艺独立的HDL高质量的设计是在完全自动的综合过程中获得没有实例化的 gate cell 和 flip-flop.首先是工具推断设计器件: 1234561. 推断MUX2. 推断寄存器3. 没有控制信号的寄存器4. 有控制信号的寄存器5. 三态门器件6. 多比特器件 2.使用 HDL 结构体3.编写高效代码","categories":[],"tags":[{"name":"HDL Coding","slug":"HDL-Coding","permalink":"http://example.com/tags/HDL-Coding/"},{"name":"Synthesis","slug":"Synthesis","permalink":"http://example.com/tags/Synthesis/"}]},{"title":"innovus_setup","slug":"innovus-setup","date":"2021-10-21T06:11:34.000Z","updated":"2021-10-21T06:12:38.778Z","comments":true,"path":"2021/10/21/innovus-setup/","link":"","permalink":"http://example.com/2021/10/21/innovus-setup/","excerpt":"","text":"","categories":[],"tags":[{"name":"setup","slug":"setup","permalink":"http://example.com/tags/setup/"},{"name":"innovus","slug":"innovus","permalink":"http://example.com/tags/innovus/"},{"name":"commandlline","slug":"commandlline","permalink":"http://example.com/tags/commandlline/"}]},{"title":"DC_MMMC","slug":"DC-MMMC","date":"2021-10-21T02:03:04.000Z","updated":"2021-10-21T05:29:19.167Z","comments":true,"path":"2021/10/21/DC-MMMC/","link":"","permalink":"http://example.com/2021/10/21/DC-MMMC/","excerpt":"","text":"MMMCCorner&emsp;Corner 可以用于指代 PVT 集合，Multi-Corner意味着有多个PVT环境. Mode&emsp;Mode 是一系列clock, 供电电压， timing constraint, libraries, SDF or parastic file 的集合，Multi-mode 用于test mode, mission mode, standby等. Scenario&emsp;Scenario 是一系列模型约束和指定的corner.一个Scenario 至少要包含指定TLUPlus library, 操作条件, 约束","categories":[],"tags":[{"name":"DC","slug":"DC","permalink":"http://example.com/tags/DC/"},{"name":"MMMC","slug":"MMMC","permalink":"http://example.com/tags/MMMC/"},{"name":"Concept","slug":"Concept","permalink":"http://example.com/tags/Concept/"}]},{"title":"DC知识点总结","slug":"DC_summary","date":"2021-10-20T06:44:21.000Z","updated":"2021-10-23T07:25:34.868Z","comments":true,"path":"2021/10/20/DC_summary/","link":"","permalink":"http://example.com/2021/10/20/DC_summary/","excerpt":"","text":"编写脚本用于处理综合报告信息 在分析综合报告的时候，用户往往只关注部分重要的的报告信息。而一次综合流程输出的报告数目比较多，在阅读和分析过程往往会令人无从下手，因此设计一个脚本文件，当用户在./report文件下执行脚本后，自动生成一个报告总结，汇总需要用户关注的报告信息。 Tcl脚本思路 伪代码的书写思路大致如下所示，具体的代码则需要更加细致的补充 123456789101112131415# 获取当前目录绝对位置和目录下的文件名filepath = pwdfilename = [ eval ls ]# 对文件名进行处理split $filename &quot;\\n&quot;# 遍历文件名foreach line $filename &#123; # 判断文件名，正则匹配，选择想要的文件 if &#123;string first $line&#125; &#123; file copy $line $filepath/report_review &#125; elseif &#123; # 继续进行其他字符串匹配 &#125;&#125; &emsp; 上述图片是实际项目过程中的命令执行流程，在实际的工作环境中，每一步骤都会处理上一步骤的环境配置，因此每一次都会加载上一次的信息，这是一个重复的过程，因此在脚本环境中，会出现重复读入输入，并利用同一个命令输出每一步骤的报告。 &emsp; 在设计中，实际的效率并不高，特别是当设计模块已经到达千万，甚至上亿门之后，综合要求更多的软件运行时间，如果某一步骤运行出错，会导致下一步骤无法运行，这对综合人员来说也是一种压力，特别是在后端进度实际就是为了给前端节省时间的情况之下。 &emsp; 在上图的内容中，综合过程可以概括为compiler+elaborate,之后的insert_dft 属于DFT工程师的设计内容在实际的过程中，综合工程师可能在了解原理的情况下进行dft的插入 DC优化设计方式：给指定功能提供最小、最快的逻辑实现。DC的过程：综合HDL，将其转换为optimized, technology-dependent, gate-level design. 支持flat 和 hierarchical design, 支持组合和时序设计，主要进行面积，时序，功耗优化。 DC工具简介DC Expert keyword: Wire load Mode, WLMDC Ultra keyword: concurrent(并发) advanced optimization,high performance design, Topographical technology-可以用来精确估计设计的物理信息DC Graphical keyword: optimize MMMC design, reduce congestion, improve runtime in ICC, floorplan DC Expert Feature 层次化编译(bottom-up or top-down) 全编译，增量编译 为复杂的 Flip-Flop 和latch 做时序优化 基于latch设计的时序补偿 时序分析 命令行及GUI DC Ultra Feature(相比 DCE 增加的) 更快的运行时间 先进的算法优化 集成datapath partition and synthesis 先进时序分析 先进的延时优化算法 先进的leakage power优化 register retiming(工具通过在组合逻辑间移动register优化时序) DC Ultra in Topographical technology 多电压多供电设计 Concurrent MMMC优化，减少迭代次数提高，获得结果的时间效率 和ICC共享 Placement以及优化技术，使用更准确的数据处理，提高设计质量 DC Graphical Feature 优化MMMC design 减少Routing Congestion 提高area, timing与ICC的联系 提高在ICC中的运行时间与可布线性 创建和修改Floorplan (using Floorplan Exploration) Physical guidence technology，包含enhanced placement,提高QoR等能力 DC in Design Flow DC术语尽管下面术语有轻微的不同，在DC manual 中可以看作相等的含义。 Synthesis: 指为RTL生成 gate-level netlist的过程，过程包含read design 和 optimize designOptimization: 是Synthesis中的一步操作，指完成(选择)满足设计约束的library cell 集合Compile: 是Design Compiler 的过程，用来执行synthesis 和 optimization Design Design:实现逻辑功能的电路描述。 Logical-level Design: 使用 Boolen equation 实现 Gate-level Design: 使用 Interconnect cell 实现 Flat Design: 不包含子设计，只有一个结构层次，且只包含library celllHierarchical Design: 包含子设计，子设计也可以包含子设计，创建多个层次结构 Reference: 一个用来搭建更大电路的library component or designLeaf cell: 只包含一个设计的unique instancePort: 端口拥有方向，input, output, inout DC支持的Flow类型Full compile: DC map、optimize整个设计，产生一个gate-level netlist，并且如果设计中存在已经mapped cell也会被 unmapped,该Flow不会保护已经存在的netlist结构。 Incremental compile: DC 可以通过改善设计结构提高design QoR,它是在init compile的基础上进行mapping, 主要集中在未满足约束的area设计上，已经存在的netlist会被保护起来，mapping 优化只有在能够改善设计的基础上被采用 编译策略Top-down: top-level design 和子设计共同编译.Bottom-up: 子设计分开编译，从底层一直变异到top-level.Mixed: 小模块使用Top-down,大模块使用Bottom-up. Optimization基于约束与变量进行优化，将设计转换成library cell，其理念是如果设计能够减少功耗且不增加其他设计模块的功耗，则可以采用该cell，完成优化 Design Compiler ModeWire Load Mode:线性负载模型，延时计算使用估计，精度较差 Topographical Mode:拓扑模型，延时计算精确性更高 ​ Multimode: 多corner，多mode ​ UPF Mode: UPF低功耗 WLM:在默认情况下，dc_shell会启用WLM, 使用线性负载进行时序预估，此时compile 和compile_ultra都是在WLM下进行synthesis过程 Topographical: 需要命令dc_sell -topographical_mode启用，此时compile_ultra和compile_ulra -spg都工作在拓扑模式，且-spg工作在DC Graphical模式，会使用到后端Floorplan的物理信息。 Setup FileDC 从三个文件位置读取.synopsys_dc.setup文件 123The Synopsys Root directoryYour home directoryThe current working directory Name Rules一些制造厂可能会自己修改命令规则，比如将Design Ware中的cell 转换成U , 将 reset转换成RET等 用户也可以通过命令修改命名规则，define_name_rules 和 change_name可以用来改变port 和 net的名称 dc_shell执行的程序过程1.创建log文件 2.读取.synopsys_dc.setup文件 3.Batch Mode下执行脚本文件 4.展示DC应用的信息 重定向标准输入输出重定向命令可以分成三个命令： 1234puts &quot;hello world&quot; &gt; file.log # 输出到file.log中，且会覆盖文件之前的内容puts &quot;hello world&quot; &gt;&gt; file.log # 在文件末尾增加file.log内容，不会覆盖文件之前的内容redirect file.log &#123;plus 12 13&#125; # 将12+13的结果输出到file.log中。 The Synthesis Flow Using Multicore TechnologyDC 支持使用多核技术完成程序运行任务，每个license支持 8 cores, 可以使用命令设置多核功能 1set_host_optiops -max_cores 8 # 设置最大运行核数为8个，增加并行执行任务数，减少运行时间 通过多核技术提高运行时间report 或者 check命令会增加脚本运行时间，为了减少运行时间，可以并行多核执行命令 1.在DCG mode下，可以使用命令redirect -bg指定后台运行的命令以及执行命令的cores。但是后台最多只能指定两个后台运行的任务，只有后台活跃任务少于两个，剩余的任务才能运行.支持 report analysis等命令2.在redirect -bg命令使用时，需要关闭set_svf命令，等redirect -bg使用完成之后，才能继续使用。 parallel_execute用来并行执行命令，如果默认没有update_timing,则parallel_execute会自动执行update_timing 在综合中划分模块综合中，模块划分可以减少综合时间，但是查的划分会增加block的尺寸，增加优化时间。 考虑设计重用划分设计重用可以减少设计时间，根据设计重用的目的进行划分可以利用实例化设计减少设计时间 保存组合逻辑设计完整性1.将相关的组合逻辑和它的目标寄存器组合在一起2.消除glue logic(胶连逻辑), “Do not add glue-logic at the top level”的意思就是说在设计的顶层连接各个子模块的时候要直接相连，而不要插入一些简单逻辑来连接各个子模块。 以寄存器作为输出为了简化约束定义，将寄存器作为全部模块的输出。对约束编写有两个好处：1.一个独立模块的输入驱动能力总是和平均的输入驱动能力相等2.前一个模块的输入延时，总是和Flip-Flop路径延时相等，这样的话不需要考虑只有组合逻辑的路径，也就能够更好的进行时序预算 根据设计目的划分设计如果为了更好的面积优化以及 timing critical ,则可以根据设计目的进行划分，这样就可以对特定的模块采用针对性的约束指定优化策略 根据编译技术进行划分当设计中出现高度结构化的设计和随机设计时，可以对不同的模块采用不同的编译策略1.高度结构化电路设计：例如，错误检测电路，这种电路包含大量的OR tree ,更加适合结构化编译2.random design : 在flatten design 中出现的设计策略 保证共享资源的一致性资源共享只会出现在verilog中的always 语句块，DC 可以使用资源共享获取更好的设计质量，如下图所示： 保证用户定义资源和驱动逻辑的完整性user-defined resource是用户自定义的函数，程序或者是Macro cell,DC不会自动创建这些资源的实例化设计，当一个user-defined resource 实例化无法满足设计要求时，可以手动增加实例化设计的数目，来完成设计要求。 隔绝特定功能可以通过功能在Top-level进行模块划分，例如隔离异步设计模块可以缩小STA问题分析的范围以及确定可测试性设计范围。","categories":[],"tags":[{"name":"DC综合工具使用","slug":"DC综合工具使用","permalink":"http://example.com/tags/DC%E7%BB%BC%E5%90%88%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"},{"name":"TCL脚本语言","slug":"TCL脚本语言","permalink":"http://example.com/tags/TCL%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80/"}]},{"title":"Hello World","slug":"hello-world","date":"2021-10-20T03:00:57.920Z","updated":"2021-10-20T08:48:42.835Z","comments":true,"path":"2021/10/20/hello-world/","link":"","permalink":"http://example.com/2021/10/20/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"Design Compiler","slug":"Design-Compiler","permalink":"http://example.com/tags/Design-Compiler/"},{"name":"Milkyway","slug":"Milkyway","permalink":"http://example.com/tags/Milkyway/"},{"name":"setup","slug":"setup","permalink":"http://example.com/tags/setup/"},{"name":"library","slug":"library","permalink":"http://example.com/tags/library/"},{"name":"HDL Coding","slug":"HDL-Coding","permalink":"http://example.com/tags/HDL-Coding/"},{"name":"Synthesis","slug":"Synthesis","permalink":"http://example.com/tags/Synthesis/"},{"name":"innovus","slug":"innovus","permalink":"http://example.com/tags/innovus/"},{"name":"commandlline","slug":"commandlline","permalink":"http://example.com/tags/commandlline/"},{"name":"DC","slug":"DC","permalink":"http://example.com/tags/DC/"},{"name":"MMMC","slug":"MMMC","permalink":"http://example.com/tags/MMMC/"},{"name":"Concept","slug":"Concept","permalink":"http://example.com/tags/Concept/"},{"name":"DC综合工具使用","slug":"DC综合工具使用","permalink":"http://example.com/tags/DC%E7%BB%BC%E5%90%88%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"},{"name":"TCL脚本语言","slug":"TCL脚本语言","permalink":"http://example.com/tags/TCL%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80/"}]}